
/*
https://open.kattis.com/problems/keyboardconcert
*/

#include <bits/stdc++.h>
#include<sstream>
#include<set>
#include<vector>

using namespace std;

const int N = 1010, M = 1010, inf = 10e8;

vector<set<int>> instruments;
ssize_t cache[N][M];
vector<int> sequence;

// int dp(ssize_t cache[][], int seq[], set<int>& keyboard, int indexSeq)
// int dp(set<int>& keyboard, int indexSeq)
int dp(int indexKeyboard, int indexSeq)
{
    if (indexSeq >= sequence.size())
        return 0;
    else if (cache[indexKeyboard][indexSeq] != inf)
        return cache[indexKeyboard][indexSeq];
    if (!instruments[indexKeyboard].count(sequence[indexSeq]))
    {
        int mini = inf;
        // for (set<int> next : instruments)
        for (int i = 0; i < instruments.size(); i++)
        {
            ssize_t result = inf;
            if (i != indexKeyboard && instruments[i].count(sequence[indexSeq]))
            {
                // result = dp(cache, seq, next, indexSeq) + 1;
                result = dp(i, indexSeq) + 1;
                cache[i][indexSeq] = max(result, cache[i][indexSeq]);
            }

            mini = min(mini, int(result));
        }
        cache[indexKeyboard][indexSeq] = mini;
        return mini;
    }
    
    // return dp(cache, seq, keyboard, indexSeq + 1);
    // return dp(keyboard, indexSeq + 1);
    return dp(indexKeyboard, indexSeq + 1);
}

int main()
{
    int n, m;
    cin >> n >> m;

    for(int i = 0; i < n; i++)
    {
        int num, note;
        cin >> num;
        set<int> s;
        for (;num > 0; num--)
        {
            cin >> note;
            s.insert(note);
        }
        instruments.emplace_back(s);
    }

    for (int i = 0, note; i < m; i++)
    {
        cin >> note;
        sequence.emplace_back(note);
    }
    
    // cout << endl;
    // for (auto& s : instruments)
    // {
    //     for (auto& i : s)
    //         cout << i << " ";
    //     cout << endl;
    // }
    // cout << endl;
    // for (auto& i : sequence)
    //     cout << i << " ";

    for (ssize_t i = 0; i < N; i++)
    {
        for (ssize_t j = 0; j < M; j++)
            cache[i][j] = inf;
    }

    int swaps = inf;
    for (int i = 0; i < instruments.size(); i++)
        // swaps = min(swaps, dp(cache, sequence, i, 0));
        // swaps = min(swaps, dp(instruments[i], 0));
        swaps = min(swaps, dp(i, 0));
    
    cout << swaps << endl;

    
    // for (ssize_t i = 0; i < N; i++)
    // {
    //     for (ssize_t j = 0; j < M; j++)
    //         cout << "cache[" <<i << "]["<< j<< "] = " << cache[i][j] << endl;;
    // }


    return 0;
}


// // int dp(ssize_t cache[][], int seq[], set<int>& keyboard, int indexSeq)
// int dp(set<int>& keyboard, int indexSeq)
// {
//     if (indexSeq >= sequence.size())
//         return 0;
//     if (!keyboard.count(sequence[indexSeq]))
//     {
//         int mini = inf;
//         for (set<int> next : instruments)
//         {
//             int result = inf;
//             if (next != keyboard)
//                 // result = dp(cache, seq, next, indexSeq) + 1;
//                 result = dp(next, indexSeq) + 1;

//             mini = min(mini, result);
//         }
//         return mini;
//     }
    
//     // return dp(cache, seq, keyboard, indexSeq + 1);
//     return dp(keyboard, indexSeq + 1);
// }

// int main()
// {
//     int n, m;
//     cin >> n >> m;

//     for(int i = 0; i < n; i++)
//     {
//         int num, note;
//         cin >> num;
//         set<int> s;
//         for (;num > 0; num--)
//         {
//             cin >> note;
//             s.insert(note);
//         }
//         instruments.emplace_back(s);
//     }

//     for (int i = 0, note; i < m; i++)
//     {
//         cin >> note;
//         sequence.emplace_back(note);
//     }
    
//     // cout << endl;
//     // for (auto& s : instruments)
//     // {
//     //     for (auto& i : s)
//     //         cout << i << " ";
//     //     cout << endl;
//     // }
//     // cout << endl;
//     // for (auto& i : sequence)
//     //     cout << i << " ";

//     int swaps = inf;
//     for (int i = 0; i < instruments.size(); i++)
//         // swaps = min(swaps, dp(cache, sequence, i, 0));
//         swaps = min(swaps, dp(instruments[i], 0));
    
//     cout << swaps << endl;

//     return 0;
// }

